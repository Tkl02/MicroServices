services:
  # --- BANCOS DE DADOS E BROKER ---

  postgres-db:
    image: postgres:15-alpine
    container_name: postgres-db
    env_file: .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - microservices-net
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  mysql-db:
    image: mysql:8.0
    container_name: mysql-db
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - microservices-net
    expose:
      - "3306"

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - microservices-net

  # --- MICROSSERVIÇOS DA APLICAÇÃO ---

  users-service:
    build:
      context: ./services/users_service
      dockerfile: Dockerfile
    container_name: users-service
    ports:
      - "8001:80"
    depends_on:
      postgres-db:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    volumes:
      - ./services/users_service/app:/app
    env_file:
      - .env
    networks:
      - microservices-net

  data-service:
    build:
      context: ./services/data_service
      dockerfile: Dockerfile
    container_name: data-service
    depends_on:
      - mysql-db
    volumes:
      - ./services/data_service/app:/app
    env_file:
      - .env
    networks:
      - microservices-net

  notifications-service:
    build:
      context: ./services/notifications_service
      dockerfile: Dockerfile
    container_name: notifications-service
    depends_on:
      - rabbitmq
    volumes:
      - ./services/notifications_service/app:/app
    env_file:
      - .env
    networks:
      - microservices-net

  api-gateway:
    build:
      context: ./api_gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8000:80"
    depends_on:
      - users-service
      - data-service
    networks:
      - microservices-net

# --- VOLUMES E REDE ---
volumes:
  postgres_data:
  mysql_data:

networks:
  microservices-net:
    driver: bridge